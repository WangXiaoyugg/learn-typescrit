{
    // ts 会把当前目录下的.ts文件作为编译上下文的一部分
    // IDE 支持实时编译，
    // 手动编译, tsc 命令默认会在当前目录或者是父级目录寻找ts.config.json
    //         使用 tsc -p ./project-path 编译
    // 编译观测模式， tsc -w
    // tsc  -v 查看编译器版本
    // tsc --pretty=true 给错误和消息设置样式，
    // tsc --init

    /* 项目引用 https://www.tslang.cn/docs/handbook/project-references.html */
    // 工程引用， tsconfig.json增加了一个新的顶层属性references。它是一个对象的数组，指明要引用的工程
        // 每个引用的path属性都可以指向到包含tsconfig.json文件的目录
        // 1. 导入引用工程中的模块实际加载的是它输出的声明文件（.d.ts）
        // 2. 如果引用的工程生成一个outFile，那么这个输出文件的.d.ts文件里的声明对于当前工程是可见的。
        // 3. 构建模式（后文）会根据需要自动地构建引用的工程。
        // 4. 拆分成多个工程后，会显著地加速类型检查和编译，减少编辑器的内存占用，还会改善程序在逻辑上进行分组
        // 5. 引用的工程必须启用新的composite设置, 必须开启declaration选项
        // 6. 可以在引用中使用prepend选项来启用前置某个依赖的输出：
    // 构建模式增量构建， --build
        // 找到所有引用的工程
        // 检查它们是否为最新版本
        // 按顺序构建非最新版本的工程
        // tsc -b foo/release.tsconfig.json bar  # Build foo/release.tsconfig.json and bar/tsconfig.json
        // 一般情况下，就算代码里有语法或类型错误，tsc也会生成输出（.js和.d.ts），除非你启用了noEmitOnError选项。 
        // 使用了outFile的编译输出结构十分灵活，因为相对路径是无关紧要的。 要注意的是，你通常不需要使用prepend - 因为这会改善构建时间并结省I/O

    // 每日构建, 保持和typescript官网的最新版本
    // `npm install -g typescript@next`
    // 更新.vscode/settting.json, "typescript.tsdk": "<path to your folder>/node_modules/typescript/lib"


    /*构建工具集成 https://www.tslang.cn/docs/handbook/integrating-with-build-tools.html */ 
        // 使用webpack, npm install ts-loader --save-dev
        // module.exports = {
        //  entry: "./src/index.tsx",
        //      output: {
        //  filename: "bundle.js"
        // },
        // resolve: {
        // Add '.ts' and '.tsx' as a resolvable extension.
        // extensions: ["", ".webpack.js", ".web.js", ".ts", ".tsx", ".js"]
        // },
        // module: {
        //    loaders: [
            // all files with a '.ts' or '.tsx' extension will be handled by 'ts-loader'
            // { test: /\.tsx?$/, loader: "ts-loader" }
        // ]
        // }
    // };


    // "compilerOptions"可以被忽略，这时编译器会使用默认值
    // files 指定包好相对和绝对的文件路径列表， 
    // inclued, exclued 属性支持一个文件glob 配置模式，
        // * 匹配 0 或者多个字符 (不包括目录分割符) .* 匹配 .ts .tsx
        // ？ 匹配任意字符 (不包括目录分割符)
        // **/ 递归匹配任意子目录
    // 使用 "outDir"指定的目录下的文件永远会被编译器排除，除非你明确地使用"files"将其包含进来
    // 使用"include"引入的文件可以使用"exclude"属性过滤, 通过 "files"属性明确指定的文件却总是会被包含在内
    // 任何被"files"或"include"指定的文件所引用的文件也会被包含进来。 A.ts引用了B.ts，因此B.ts不能被排除，除非引用它的A.ts在"exclude"列表中
    // 需要注意编译器不会去引入那些可能做为输出的文件；比如，假设我们包含了index.ts，那么index.d.ts和index.js会被排除在外
    // 默认所有可见的"@types"包会在编译过程中被包含进来
    // 如果指定了typeRoots，只有typeRoots下面的包才会被包含进来, 这个配置文件会包含所有./typings下面的包，而不包含./node_modules/@types里面的包
    // 如果指定了types，只有被列出来的包才会被包含进来, 指定"types": []来禁用自动引入@types包
    // 自动引入只在你使用了全局的声明是重要的
    // 使用extend继承配置， "extends": "./configs/base",

    // 编译的错误信息列表文档: https://www.tslang.cn/docs/handbook/error.html

    // 编译配置的文档: https://www.tslang.cn/docs/handbook/compiler-options.html
    // 编译配置
    
    
    // "compilerOptions": {
    //     //基本配置
    //      // 指定编译的ECMA目标版本 ['es3', 'es5', 'es2015','ES2015', 'ES2016', 'ES2017', 'ESNEXT' ]
    //     "target": "es5",    
    //     // 指定打包的模块规范'commonjs', 'amd', 'system', 'umd' or 'es2015'
    //     "module": "commonjs" ,
    //     // 指定要包含再库编译中的库文件
    //     "lib": ["dom", "es2015"],
    //     // 允许编译的JS文件
    //     "allowJs": false,
    //     // 检查JS文件中的错误
    //     "checkJs": false, 
    //     // 指定jsx代码生成模式: 'preserve', 'react-native', or 'react', http://www.typescriptlang.org/docs/handbook/jsx.html
    //     "jsx": "preserve",
    //     // 生成对应的声明文件 .d.ts
    //     "declaration": true,
    //     // 生成对应的 .map 文件
    //     "sourceMap": false,
    //     // 将输出文件合成一个文件
    //     "outFile": "./dist.js",
    //     // 指定输出的目录
    //     "outDir": "./dist",
    //     // 用来控制输出目录结构 --outDir
    //     "rootDir": "./",
    //     // 删除编译后的所有注释
    //     "removeComments": true,
    //     // 不生成输出文件
    //     "noEmit": false,
    //     // 从 tslib 导入辅助工具函数, __extends， __rest
    //     "importHelpers": true,
    //     // 将每个模块作为单独的模块，与 'ts.transpileModule' 类似
    //     "isolatedModules": true,

    //     // 严格的类型检查选项
    //     // 启用所有的严格检查
    //     "strict": true ,
    //     // 在表达式和声明上有隐含的 any类型时报错
    //     "noImplicitAny": true,
    //     // 启用严格的 null 检查
    //     "strictNullChecks": false,
    //     // 当 this 表达式值为 any 类型的时候，生成一个错误
    //     "noImplicitThis": true,
    //     //  以严格模式检查每个模块，并在每个文件里加入 'use strict'
    //     "alwaysStrict": true,

    //     // 额外的检查
    //     // 有未使用的变量时，抛出错误
    //     "noUnusedLocals": true, 
    //     // 有未使用的参数时，抛出错误
    //     "noUnusedParameters": true,
    //     // 并不是所有函数里的代码都有返回值时，抛出错误
    //     "noImplicitReturns": false,
    //     // 报告 switch 语句的 fallthrough 错误, 不允许 switch 的 case 语句贯穿
    //     "noFallthroughCasesInSwitch": true,
        
    //     // 模块解析选项
    //     // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)
    //     "moduleResolution": "node",
    //     // 用于解析非相对模块名称的基目录
    //     "baseUrl": "./",
    //     // 模块名到基于 baseUrl 的路径映射的列表, https://juejin.im/post/5b3064b851882574e808e2b4
    //     "paths": {
    //         // "@example": ["../src/example/*"],
    //     },
    //     // 根文件夹列表，其组合内容表示项目运行时的结构内容
    //     "rootDirs": [],
    //     // 包含类型声明的文件列表
    //     "typeRoots": [],
    //     // 需要包含的类型声明文件名列表
    //     "types": [],
    //     // 允许从没有设置默认导出的模块中默认导入。
    //     "allowSyntheticDefaultImports": true,

    //     // Source Map Options
    //     // 指定调试器应该找到 TypeScript 文件而不是源文件的位置
    //     "sourceRoot": "./",
    //     // 指定调试器应该找到映射文件而不是生成文件的位置
    //     "mapRoot": "./", 
    //     // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件
    //     "inlineSourceMap": true,    
    //     //  将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性
    //     "inlineSources": false,
        
    //     // 其他选项
    //     // 启用装饰器语法
    //     "experimentalDecorators": true,
    //     // 为装饰器提供元数据的支持
    //     "emitDecoratorMetadata": true,
    // },
    // // 显示指定要编译的文件
    // "files": [
    //     "../src/example/enum.ts"
    // ],
    // // 指定要包含的文件, 支持globs
    // "include": [
    //     "../src/example",
    // ],
    // // 指定要排除的文件, 支持globs
    // "exclude": [
    //     "../src/api",
    //     "../src/assets",
    // ],
    // 在最顶层设置compileOnSave标记，可以让IDE在保存文件的时候根据tsconfig.json重新生成文件。
    // "compileOnSave": true,
    // "references": [
    //     {"path": "../src", "prepend": true}
    // ]
}